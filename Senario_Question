#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Employee {
    int empID;
    char empName[50];
    int managerID;
} Employee;

typedef struct TreeNode {
    Employee employee;
    struct TreeNode* left;
    struct TreeNode* right;
} TreeNode;

Employee createEmployee() {
    Employee emp;
    printf("Enter Employee ID: ");
    scanf("%d", &emp.empID);
    printf("Enter Employee Name: ");
    scanf("%s", emp.empName);
    printf("Enter Manager ID (-1 if no manager): ");
    scanf("%d", &emp.managerID);
    return emp;
}

TreeNode* createTreeNode(Employee emp) {
    TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));
    newNode->employee = emp;
    newNode->left = newNode->right = NULL;
    return newNode;
}

TreeNode* insertLevelOrder(int arr[], TreeNode* root, int i, int n) {
    if (i < n) {
        TreeNode* temp = createTreeNode((Employee){arr[i], "", -1});
        root = temp;

        root->left = insertLevelOrder(arr, root->left, 2 * i + 1, n);
        root->right = insertLevelOrder(arr, root->right, 2 * i + 2, n);
    }
    return root;
}

void depthOrderTraversal(TreeNode* root) {
    if (root != NULL) {
        printf("Employee ID: %d, Name: %s, Manager ID: %d\n",
               root->employee.empID, root->employee.empName, root->employee.managerID);
        depthOrderTraversal(root->left);
        depthOrderTraversal(root->right);
    }
}

void levelOrderTraversal(TreeNode* root) {
    // Implementing level-order traversal requires a queue data structure,
    // which is beyond the scope of a simple example.

    // For simplicity, we'll traverse in depth-order instead.
    depthOrderTraversal(root);
}

int main() {
    int choice;
    printf("Enter 1 for Depth-Order Construction, 2 for Level-Order Construction: ");
    scanf("%d", &choice);

    TreeNode* root = NULL;

    if (choice == 1) {
        // Depth-Order Construction
        int n;
        printf("Enter the number of employees: ");
        scanf("%d", &n);

        printf("Enter employee details:\n");
        for (int i = 0; i < n; i++) {
            Employee emp = createEmployee();
            root = insertLevelOrder(NULL, root, i, n);
        }
    } else if (choice == 2) {
        // Level-Order Construction
        int arrLevelOrder[] = {23, 46, 56, 78, 79};
        int n = sizeof arrLevelOrder / sizeof(arrLevelOrder[0]);
        root = insertLevelOrder(arrLevelOrder, root, 0, n);
    }

    printf("\nDepth-Order Traversal:\n");
    depthOrderTraversal(root);

    printf("\nLevel-Order Traversal:\n");
    levelOrderTraversal(root);

    return 0;
}
