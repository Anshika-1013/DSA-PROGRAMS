#include <stdio.h>
#include <stdlib.h>

// Structure to represent a stack
struct Stack {
    int capacity;
    int top;
    int* array;
};

// Function to create a stack with a given capacity
struct Stack* createStack(int capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*)malloc(stack->capacity * sizeof(int));
    return stack;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == stack->capacity - 1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int item) {
    if (isFull(stack)) {
        printf("Stack Overflow\n");
        return;
    }
    stack->array[++stack->top] = item;
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
        return -1; // Return an invalid value in case of underflow
    }
    return stack->array[stack->top--];
}

// Function to reverse a stack
void reverseStack(struct Stack* stack) {
    // Create an auxiliary stack
    struct Stack* auxStack = createStack(stack->capacity);

    // Push all elements from the original stack to the auxiliary stack
    while (!isEmpty(stack)) {
        int item = pop(stack);
        push(auxStack, item);
    }

    // Pop all elements from the auxiliary stack back to the original stack
    while (!isEmpty(auxStack)) {
        int item = pop(auxStack);
        push(stack, item);
    }

    // Free the auxiliary stack
    free(auxStack);
}

// Function to print the stack
void printStack(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return;
    }

    printf("Stack elements: ");
    for (int i = 0; i <= stack->top; ++i) {
        printf("%d ", stack->array[i]);
    }
    printf("\n");
}

int main() {
    struct Stack* stack = createStack(5);

    push(stack, 1);
    push(stack, 2);
    push(stack, 3);
    push(stack, 4);
    push(stack, 5);

    printf("Original ");
    printStack(stack);

    reverseStack(stack);

    printf("Reversed ");
    printStack(stack);

    // Free the memory allocated for the stack
    free(stack->array);
    free(stack);

    return 0;
}
