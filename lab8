#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

int search(int arr[], int start, int end, int value) {
    int i;
    for (i = start; i <= end; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}

struct Node* buildTree(int inorder[], int preorder[], int start, int end) {
    static int preIndex = 0;

    if (start > end) {
        return NULL;
    }

    struct Node* node = newNode(preorder[preIndex++]);

    if (start == end) {
        return node;
    }

    int inIndex = search(inorder, start, end, node->data);

    node->left = buildTree(inorder, preorder, start, inIndex - 1);
    node->right = buildTree(inorder, preorder, inIndex + 1, end);

    return node;
}

void inorder(struct Node* node) {
    if (node == NULL) {
        return;
    }
    inorder(node->left);
    printf("%d ", node->data);
    inorder(node->right);
}

void preorder(struct Node* node) {
    if (node == NULL) {
        return;
    }
    printf("%d ", node->data);
    preorder(node->left);
    preorder(node->right);
}

void postorder(struct Node* node) {
    if (node == NULL) {
        return;
    }
    postorder(node->left);
    postorder(node->right);
    printf("%d ", node->data);
}

int main() {
    int inorder[] = {4, 2, 5, 1, 3, 6};
    int preorder[] = {1, 2, 4, 5, 3, 6};
    int n = sizeof(inorder) / sizeof(inorder[0]);

    struct Node* root = buildTree(inorder, preorder, 0, n - 1);

    printf("Inorder traversal: ");
    inorder(root);
    printf("\nPreorder traversal: ");
    preorder(root);
    printf("\nPostorder traversal: ");
    postorder(root);

    return 0;
}
