#include<stdio.h>
#include<stdlib.h>

// Define the structure for BST nodes
typedef struct node {
    int data;
    struct node *left;
    struct node *right;
} node;

// Function to create a new node
node* create(int data) {
    node *newNode = malloc(sizeof(node));
    if(newNode == NULL) {
        printf("Error creating a new node.\n");
        exit(0);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;

    return newNode;
}

// Function to insert a node in the BST
node* insert(node *root, int data) {
    if(root == NULL) return create(data);

    if(data < root->data)
        root->left = insert(root->left, data);
    else if(data > root->data)
        root->right = insert(root->right, data);

    return root;
}

// Function to find the node with minimum value
node* minValueNode(node* node) {
    struct node* current = node;

    /* loop down to find the leftmost leaf */
    while (current && current->left != NULL)
        current = current->left;

    return current;
}

// Function to delete a node from the BST
node* delete(node *root, int data) {
    if(root == NULL) return root;

    if(data < root->data)
        root->left = delete(root->left, data);
    else if(data > root->data)
        root->right = delete(root->right, data);
    else {
        // Node with only one child or no child
        if(root->left == NULL) {
            node *temp = root->right;
            free(root);
            return temp;
        }
        else if(root->right == NULL) {
            node *temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children
        node *temp = minValueNode(root->right);

        // Copy the inorder successor's content to this node
        root->data = temp->data;

        // Delete the inorder successor
        root->right = delete(root->right, temp->data);
    }
    return root;
}

// Function to search for a node in the BST
node* search(node *root, int data) {
    if(root == NULL || root->data == data) return root;

    if(root->data < data)
        return search(root->right, data);

    return search(root->left, data);
}

// Function to calculate the height of the BST
int height(node *root) {
    if(root == NULL) return -1;

    int leftHeight = height(root->left);
    int rightHeight = height(root->right);

    if(leftHeight > rightHeight) return leftHeight + 1;
    else return rightHeight + 1;
}

// Function to perform in-order traversal
void inorder(node *root) {
    if(root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Function to perform pre-order traversal
void preorder(node *root) {
    if(root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// Function to perform post-order traversal
void postorder(node *root) {
    if(root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    node *root = NULL;
    root = insert(root, 8);
    root = insert(root, 3);
    root = insert(root, 10);
    root = insert(root, 1);
    root = insert(root, 6);
    root = insert(root, 14);
    root = insert(root, 4);
    root = insert(root, 7);
    root = insert(root, 13);

    printf("Inorder traversal: ");
    inorder(root);
    printf("\n");

    printf("Preorder traversal: ");
    preorder(root);
    printf("\n");

    printf("Postorder traversal: ");
    postorder(root);
    printf("\n");

    printf("Height of the tree: %d\n", height(root));

    root = delete(root, 10);

    printf("Inorder traversal after deletion: ");
    inorder(root);
    printf("\n");

    node *searchResult = search(root, 14);
    if(searchResult != NULL) printf("Element 14 found in the tree.\n");
    else printf("Element 14 not found in the tree.\n");

    return 0;
}
